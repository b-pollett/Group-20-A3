/**
* Upvote the comment at 'index'. That is: count this comment as more helpful.
* If the index is invalid, do nothing.
*/
@Test
public void upvoteComment(int index)
  {
  SalesItem salesIte1 = new SalesItem("Brain Surgery for Dummies.", 9899);
  if(index >=0 && index < comments.size()) { // if index is valid
  assertEqual(1, comments.get(index).upvote());
  }
  }

/**
* Downvote the comment at 'index'. That is: count this comment as less helpful.
* If the index is invalid, do nothing.
*/
@Test
public void downvoteComment(int index)
  {
  SalesItem salesIte1 = new SalesItem("Brain Surgery for Dummies.", 9899);
  if(index >=0 && index < comments.size()) { // if index is valid
  assertEqual(1, comments.get(index).downvote());
  }
  }

/**
* Return the most helpful comment. The most useful comment is the one with the highest vote
* balance. If there are multiple comments with equal highest balance, return any one of
* them.
*/
@Test
public Comment findMostHelpfulComment()
  {
  SalesItem salesIte1 = new SalesItem("Brain Surgery for Dummies.", 9899);
  Iterator<Comment> it = comments.iterator();
  Comment best = it.next();
  while(it.hasNext()) {
  Comment current = it.next();
  if(current.getVoteCount() > best.getVoteCount()) {
  best = current;
  }
  }
  return best;
  }

/**
* Check whether the given rating is invalid. Return true if it is invalid.
* Valid ratings are in the range [1..5].
*/
@Test
private boolean ratingInvalid(int rating)
  {
  return rating < 0 || rating > 5;
  }
